// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  //output = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  DRIVER
  ADMIN
}

enum DeliveryStatus {
  PENDING
  IN_TRANSIT
  DELIVERED
  CANCELLED
}

enum RequestStatus {
  PENDING
  ACCEPTED
  CANCELLED
}

model User {
  id            Int          @id @default(autoincrement())
  fullName      String
  email         String       @unique
  password      String
  role          Role         @default(USER) // USER, DRIVER, or ADMIN
  licenseNumber String?      @unique // Only for DRIVER
  vehicle       String? // Only for DRIVER
  deliveries    Deliveries[] // Only for DRIVER
  deliveryRequest DeliveryRequest[]
  status        String       @default("AVAILABLE") 
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

}

model DeliveryRequest {
  id              Int      @id @default(autoincrement())
  deliveryId      String   @unique @default(uuid()) // Unique ID for tracking
  userId          Int
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  pickupLocation  String
  dropoffLocation String
  receiversPhone  String
  packageInfo     String   // Description of the package
  status          RequestStatus @default(PENDING) // Using an enum for status
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Deliveries {
  id         Int      @id @default(autoincrement())
  deliveryId String   @unique
  status     DeliveryStatus  @default(PENDING)
  driverId   Int?
  driver     User?    @relation(fields: [driverId], references: [id], onDelete: SetNull)
  routeId    Int
  route      Route    @relation(fields: [routeId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
}

model Route {
  id            Int          @id @default(autoincrement())
  origin        String
  destination   String
  distance      Float? // distance in Km or miles
  estimatedTime String?
  deliveries    Deliveries[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}
